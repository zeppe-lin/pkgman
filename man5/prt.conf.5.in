.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PRT.CONF.5 1"
.TH PRT.CONF.5 1 "2020-11-29" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
prt.conf \- Configuration file for prt
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This file, by default \fI/etc/prt.conf\fR, is read by \fBprt\fR\|(8).
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
Every line can contain one configuration option. The format of the lines is
\&\fB<key>  <value>\fR.
The valid keys are:
.IP "\fBprtdir \f(BIpath\fB[:\f(BIport1\fB, \f(BIport2\fB, \f(BI...\fB]\fR" 4
.IX Item "prtdir path[:port1, port2, ...]"
The location where to look for the ports.
The order of the prtdir options is important as if a port is in multiple
directories, \fBprt\fR will use the one found first (directories listed first
have precedence).
.Sp
If you want to restrict the ports used from one prtdir, you can append a
comma-separated list of ports to be used after the path, using a colon \fB\f(CB\*(C`:\*(C'\fB\fR
character to separate the two components.
.RS 4
.IP "\fB\f(BIpath\fB\fR" 2
.IX Item "path"
The directory.
.IP "\fB\f(BIport\fB\fR" 2
.IX Item "port"
The final directory in the path.
.RE
.RS 4
.Sp
e.g:
    prtdir /usr/src/ports/crux/core
    prtdir /usr/src/ports/crux/contrib:mpv,ffmpeg
.RE
.IP "\fBrunscripts \f(BIyes\fB|\f(BIno\fB\fR" 4
.IX Item "runscripts yes|no"
Run pre/post\-install and pre/post\-remove scripts.
.Sp
default: \fB\f(BIno\fB\fR.
.IP "\fBpreferhigher \f(BIyes\fB|\f(BIno\fB\fR" 4
.IX Item "preferhigher yes|no"
If set to \fB\f(BIyes\fB\fR, \fBprt\fR will parse version strings and prefer
the higher one, even if the one found in the ports tree is lower.
.Sp
Will influence \fBdiff\fR, \fBquickdiff\fR and \fBsysup\fR.
.Sp
default: \fB\f(BIno\fB\fR.
.IP "\fBuseregex \f(BIyes\fB|\f(BIno\fB\fR" 4
.IX Item "useregex yes|no"
If set to \fB\f(BIyes\fB\fR, \fBprt\fR will interpret \fB\f(BIexpr\fB\fR and \fB\f(BIfilter\fB\fR patterns
in \fBlist\fR, \fBlistinst\fR, \fBprintf\fR, \fBsearch\fR, \fBdsearch\fR and \fBfsearch\fR as
regular expressions.
.Sp
default: \fB\f(BIno\fB\fR.
.IP "\fBreadme \f(BIverbose\fB|\f(BIcompact\fB|\f(BIdisabled\fB\fR" 4
.IX Item "readme verbose|compact|disabled"
If the \fBreadme\fR option is set to something different that \fB\f(BIdisabled\fB\fR,
\&\fBprt\fR will notify the user if she/he installs a port with a \fI\s-1README\s0\fR file.
.RS 4
.IP "\fB\f(BIverbose\fB\fR" 2
.IX Item "verbose"
Print separate information about \s-1README\s0 files.
.IP "\fB\f(BIcompact\fB\fR" 2
.IX Item "compact"
Integrate in result output.
.IP "\fB\f(BIdisabled\fB\fR" 2
.IX Item "disabled"
No information about \s-1README\s0 files.
.RE
.RS 4
.Sp
See \fBprt\fR\|(8) and especially the readme command how to read those \s-1README\s0 files.
.Sp
default: \fB\f(BIverbose\fB\fR.
.RE
.IP "\fBwritelog \f(BIenabled\fB|\f(BIdisabled\fB\fR" 4
.IX Item "writelog enabled|disabled"
Write the log.
.Sp
default: \fB\f(BIdisabled\fB\fR.
.IP "\fBlogmode \f(BIappend\fB|\f(BIoverwrite\fB\fR" 4
.IX Item "logmode append|overwrite"
Write log mode.
.Sp
default: \fB\f(BIoverwrite\fB\fR.
.IP "\fBrmlog_on_success \f(BIyes\fB|\f(BIno\fB\fR" 4
.IX Item "rmlog_on_success yes|no"
When set to \fB\f(BIyes\fB\fR, log files of successful builds will be removed.
.Sp
default: \fB\f(BIno\fB\fR.
.IP "\fBlogfile \f(BIformat\fB\fR" 4
.IX Item "logfile format"
The string that contains a \fBpath\fR to the log file, where all occurrences of
next characters will be replaced by corresponding items:
.RS 4
.ie n .IP "%n \-> port name" 2
.el .IP "\f(CW%n\fR \-> port name" 2
.IX Item "%n -> port name"
.PD 0
.ie n .IP "%p \-> port's path" 2
.el .IP "\f(CW%p\fR \-> port's path" 2
.IX Item "%p -> port's path"
.ie n .IP "%v \-> version" 2
.el .IP "\f(CW%v\fR \-> version" 2
.IX Item "%v -> version"
.ie n .IP "%r \-> release" 2
.el .IP "\f(CW%r\fR \-> release" 2
.IX Item "%r -> release"
.RE
.RS 4
.PD
.Sp
This allows you to have separate log files per port.
.Sp
default: \fB''\fR.
.Sp
e.g:
    /var/log/pkgbuild/%n.log
.RE
.IP "\fBmakecommand \f(BIcommand\fB\fR" 4
.IX Item "makecommand command"
Use an alternative \fB\f(BIcommand\fB\fR instead of \fB\f(CB\*(C`pkgmk\*(C'\fB\fR
for the command which is used to build the package.
.Sp
Default: \fBpkgmk\fR.
.IP "\fBaddcommand \f(BIcommand\fB\fR" 4
.IX Item "addcommand command"
Use an alternative \fB\f(BIcommand\fB\fR instead of \fB\f(CB\*(C`pkgadd\*(C'\fB\fR
for the command which is used to install the package.
.Sp
Default: \fBpkgadd\fR.
.IP "\fBremovecommand \f(BIcommand\fB\fR" 4
.IX Item "removecommand command"
Use an alternative \fB\f(BIcommand\fB\fR instead of \fB\f(CB\*(C`pkgrm\*(C'\fB\fR
for the command which is used to remove the package.
.Sp
Default: \fBpkgrm\fR.
.IP "\fBrunscriptcommand \f(BIcommand\fB\fR" 4
.IX Item "runscriptcommand command"
Use an alternative \fB\f(BIcommand\fB\fR instead of \fB\f(CB\*(C`sh\*(C'\fB\fR
for the command which is used to run the pre/post\-install and
pre/post\-remove scripts.
.Sp
Default: \fBsh\fR.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Here is a sample \fI/etc/prt.conf\fR file:
.PP
.Vb 3
\&    #
\&    # /etc/prt.conf: configuration file for prt(8)
\&    #
\&
\&    ## Use local directory first
\&    #prtdir /usr/src/ports/unofficial
\&
\&    ## CRUX official supported
\&    prtdir /usr/src/ports/core
\&    prtdir /usr/src/ports/opt
\&    prtdir /usr/src/ports/xorg
\&    prtdir /usr/src/ports/compat\-32
\&    #prtdir /usr/src/ports/contrib
\&
\&    ## Use myport1,myport2 from local directory
\&    #prtdir /home/crux/ports:myport1,myport2
\&
\&    ## Log options
\&    writelog enabled
\&    logmode overwrite
\&    rmlog_on_success yes
\&    logfile /var/log/pkgbuild/%n.log
\&
\&    ## How to notify the user about README files
\&    readme verbose
\&
\&    ## Prefer higher versions in sysup / diff
\&    preferhigher no
\&
\&    ## Use regex search
\&    useregex no
\&
\&    ## Run pre\- and post\-install scripts
\&    runscripts yes
.Ve
.SH "TIPS & TRICKS"
.IX Header "TIPS & TRICKS"
.IP "\fBBuild ports as an unprivileged user\fR" 4
.IX Item "Build ports as an unprivileged user"
.RS 4
.PD 0
.IP "1) add a new user" 3
.IX Item "1) add a new user"
.PD
.Vb 1
\& useradd \-m \-s /bin/false pkgmk
.Ve
.IP "2) add permissions to write in the \fB\s-1PKGMK_SOURCE_DIR\s0\fR, \fB\s-1PKGMK_PACKAGE_DIR\s0\fR, \fB\s-1PKGMK_WORK_DIR\s0\fR" 3
.IX Item "2) add permissions to write in the PKGMK_SOURCE_DIR, PKGMK_PACKAGE_DIR, PKGMK_WORK_DIR"
(you need to set up dedicated directories in \fI/etc/pkgmk.conf\fR).
.Sp
.Vb 1
\& chown pkgmk /home/pkgmk/{distfiles,packages,work}
.Ve
.IP "3) set up the \fBmakecommand\fR in the \fB\f(BI/etc/prt.conf\fB\fR" 3
.IX Item "3) set up the makecommand in the /etc/prt.conf"
.Vb 1
\& makecommand sudo \-H \-u pkgmk fakeroot pkgmk
.Ve
.RE
.RS 4
.RE
.IP "\fBRenice pkgmk's child processes\fR" 4
.IX Item "Renice pkgmk's child processes"
If you keep using your computer while compiling packages you will notice that
your box is much less responsive as usual. This is caused by having two
\&\*(L"groups\*(R" of processes with the same nice priority: your usual running tasks
on one side, and \fBprt\fR\|(8) (and its child processes) on the other. Now, if you
could renice \fBprt\fR and its children to a higher nice (i.e. lower priority!)
value (default is 0), compiling would inevitably take somewhat longer, but you
could use your workstation without noticing much difference to its usual
performance.
.Sp
Just set up the \fBmakecommand\fR in the \fB\f(BI/etc/prt.conf\fB\fR to something like
this:
.Sp
.Vb 1
\& makecommand sudo \-H \-u pkgmk nice \-n10 ionice \-c2 \-n6 pkgmk
.Ve
.Sp
or like this (to use \fBfakeroot\fR\|(1)):
.Sp
.Vb 1
\& makecommand sudo \-H \-u pkgmk nice \-n10 ionice \-c2 \-n6 fakeroot pkgmk
.Ve
.IP "\fBBuild in \s-1RAM\s0\fR" 4
.IX Item "Build in RAM"
Find your user \s-1ID\s0 for pkgmk:
 id pkgmk
.Sp
Edit /etc/fstab and add this line. Setting your preferred size size=... in M
for megabytes or G for gigabytes and user \s-1ID\s0 of the previous command uid=...
.Sp
.Vb 1
\& pkgmk /home/pkgmk/work tmpfs size=${size}G,uid=${uid},defaults 0 0
.Ve
.Sp
Mount the tmpfs:
.Sp
.Vb 1
\& mount \-a
.Ve
.Sp
Edit \fB\f(BI/etc/pkgmk.conf\fB\fR and set where you put your ram file system from
your \fB\f(BI/etc/fstab\fB\fR file.
.Sp
.Vb 1
\& PKGMK_WORK_DIR="/home/pkgmk/work/$name"
.Ve
.Sp
Edit \fB\f(BI/etc/pkgmk.conf\fB\fR and remove \-pipe from all your *FLAGS=.
.Sp
.Vb 2
\& CFLAGS=\*(Aq\-O2 \-march=x86\-64 \-fomit\-frame\-pointer\*(Aq
\& CXXFLAGS=\*(Aq\-O2 \-march=x86\-64 \-fomit\-frame\-pointer\*(Aq
.Ve
