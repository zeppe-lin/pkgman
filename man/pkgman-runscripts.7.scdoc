PKGMAN-RUNSCRIPTS(7)

# NAME

pkgman-runscripts - pre/post-install and pre/post-remove scripts for
packages

# SYNOPSIS

These scripts are invoked by *pkgman*(1) during package installation,
updates, and removal.  They are not meant ro be run directly as users.

# DESCRIPTION

*pkgman*(1) supports the following scripts in a packages' source
directory: _pre-install_, _post-install_, _pre-remove_, and
_post-remove_.

These scripts allow package maintainers to perform actions before or
after main operations.  Script execution depends on the *runscripts*
option in _/etc/pkgman.conf_, and the default interpreter is set by
*runscriptcommand* (default: *sh*(1p)).

## Execution

*pre-install*:  Runs before files are installed.++
*post-install*: Runs after files are installed.++
*pre-remove*:   Runs before files are removed.++
*post-remove*:  Runs after files are removed.

## Reporting Failures

Failures (non-zero exit code) in these scripts do not abort the
associated *pkgman*(1) operation.  Instead, *pkgman*(1) reports script
statuses:

	For a single script failure:
	```
	pkgman: installing pkgname [pre: fail]
	```

	For multiple scripts with mixed results:
	```
	pkgman: installing pkgname [pre: ok, post: fail]
	```

This applies to operations like installation, removal, updates, and
system updates (e.g., *pkgman-install*(8), *pkgman-remove*(8),
*pkgman-update*(8), and *pkgman-sysup*(8)).

## Guidelines

Design packages assuming scripts might not run, especially in *core*
pkgsrc collection.

If _pre-install_ adds a user, _pre-remove_ must remove them.

Scripts should *not*: edit config files, remove other packages,
restart system services, prompt for user input.

Scripts must start with "#!/bin/sh -ex".  The *-e* option ensures that
the script will exit immediately if any command fails (returns a
non-zero exit status), following fail-first practice.  The *-x* option
enables logging of script execution by *pkgman*(1), which is helpful
for debugging script failures.

It's recommended to explicitly set the *PATH* environment variable at
the beginning of your scripts to include all necessary directories,
like:

```
export PATH="/sbin:/usr/sbin:/bin:/usr/bin"
```

This ensures that commands used within the script can be found
regardless of the user's environment or potential changes in package
binary locations.

These rules mainly apply to official repositories; custom collections
have more flexibility.

# FILES

_/etc/pkgman.conf_
	Configuretion for *pkgman*(1).

# EXAMPLES

The following examples demonstrate a _post-install_ and a
corresponding _post-remove_ script for "dhcpcd" package.

*post-install*:
```
#!/bin/sh -ex

export PATH="/sbin:/usr/sbin:/bin:/usr/bin"

if ! getent group  dhcpcd >/dev/null; then
      groupadd -r dhcpcd
fi

if ! getent passwd dhcpcd >/dev/null; then
      useradd  -g dhcpcd -r -d /var/lib/dhcpcd -s /bin/false dhcpcd
fi

passwd -l dhcpcd
chown -R dhcpcd:dhcpcd /var/lib/dhcpcd

# End of file.
```

This script ensures the dhcpcd group and user exist, locks the user's
password, and sets the correct ownership for its data directory.

*post-remove*:
```
#!/bin/sh -ex

export PATH="/sbin:/usr/sbin:/bin:/usr/bin"

if getent passwd dhcpcd >/dev/null; then
    userdel dhcpcd
fi

if getent group dhcpcd >/dev/null; then
    groupdel dhcpcd
fi

# End of file.
```

This script removes the dhcpcd user and group if they exist on the
system.  The _/var/lib/dhcpcd_ directory is typically handled by the
package manager during the removal process.

# SEE ALSO

*pkgman*(1),
*pkgman.conf*(5),
*pkgman-install*(8),
*pkgman-update*(8),
*pkgman-remove*(8),
*pkgman-sysup*(8),
*sh*(1p)

; vim: ft=scdoc cc=72 tw=70
